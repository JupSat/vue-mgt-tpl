@use './themes.scss' as *;
//切换主题时 获取不同的主题色值
@mixin themeify {
  @each $theme-name, $theme-map in $themes {
    //!global 把局部变量强升为全局变量
    $theme-map: $theme-map !global;
    //判断html的data-theme的属性值  #{}是sass的插值表达式
    //& sass嵌套里的父容器标识   @content是混合器插槽，像vue的slot
    [data-theme='#{$theme-name}'] & {
      @content;
    }
  }
}

//从主题色map中取出对应颜色
@function themed($key) {
  @return map-get($theme-map, $key);
}

//获取背景颜色
@mixin bg_color($color) {
  @include themeify {
    background-color: themed($color) !important;
  }
}

//获取字体颜色
@mixin font_color($color) {
  @include themeify {
    color: themed($color) !important;
  }
}

//获取边框颜色
@mixin border_color($color) {
  @include themeify {
    border-color: themed($color) !important;
  }
}

//获取盒子阴影颜色
@mixin box_shadow($color) {
  @include themeify {
    box-shadow: 0 0.5rem 1rem 0 themed($color) !important;
  }
}

//获取border-left颜色
@mixin borderLeft($color) {
  @include themeify {
    border-left: 1px solid themed($color) !important;
  }
}

//获取border-right颜色
@mixin borderRight($color) {
  @include themeify {
    border-right: 1px solid themed($color) !important;
  }
}

// 获取主题颜色
@function get-color($color, $shade: 'mainColor', $map: $themes) {
  // check color exists
  @if (map-has-key($map, $color)) {
    $value: map-get($map, unquote($color));
    // check if color or map
    @if type-of($value) == color {
      // return color
      @return $value;
    }
    // check shade of color exists
    @if (map-has-key($value, $shade)) {
      // return shade of color
      @return map-get($value, $shade);
    }
  }
  // else do nothing
  @return null;
}
